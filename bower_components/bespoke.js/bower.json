{
  "name": "bespoke.js",
  "version": "0.4.0",
  "main": "./dist/bespoke.min.js",
  "ignore": [
    "**/.*"
  ],
  "gitHead": "404dccb5112f5595094abb5b0590cb6948c6b0ea",
  "readme": "[![Build Status](https://secure.travis-ci.org/markdalgleish/bespoke.js.png)](http://travis-ci.org/markdalgleish/bespoke.js)\n\n# Bespoke.js\n\n### DIY Presentation Micro-Framework\n\n[Bespoke.js](http://markdalgleish.com/projects/bespoke.js) is a super minimal (<1KB min'd and gzipped), modular presentation library for modern browsers, designed to foster a rich [plugin ecosystem](#plugins).\n\nThe core library [sets up the presentation](#javascript), provides a simple [control API](#control-api), manages [events](#events) and adds [classes](#CSS) to the slides to allow CSS transitions.\n\nAny other functionality, from [keyboard](https://github.com/markdalgleish/bespoke-keys) and [touch](https://github.com/markdalgleish/bespoke-touch) interactions to [bullet lists](https://github.com/markdalgleish/bespoke-bullets) and [hash routing](https://github.com/markdalgleish/bespoke-hash), is implemented as a [plugin](#plugins). Joining the Bespoke.js plugin ecosystem is simple with [Bespoke.js Plugin Generator](https://github.com/markdalgleish/generator-bespokeplugin).\n\n## Creating a Presentation\n\nDue to the highly modular nature of Bespoke.js, the quickest way to get started is with [Bespoke.js Generator](https://github.com/markdalgleish/generator-bespoke), a [Yeoman](http://yeoman.io) generator that scaffolds a boilerplate presentation with a [Grunt](http://gruntjs.com) build system.\n\nAssuming you have [Node.js](http://nodejs.org) installed, in a blank directory:\n\n```bash\n$ npm install -g generator-bespoke\n$ yo bespoke\n```\n\nIn your newly scaffolded project, you can use the following Grunt tasks:\n\n * ```$ grunt server``` to run a preview server with LiveReload.\n * ```$ grunt deploy``` to deploy to GitHub Pages.\n * ```$ grunt``` to compile static assets to 'public'.\n\nFor more detailed instructions, check out the [Bespoke.js Generator](https://github.com/markdalgleish/generator-bespoke) repo.\n\nIf you'd prefer to craft a new presentation from scratch, you can install Bespoke.js from [Bower](http://bower.io) with `bower install bespoke.js`, from [npm](http://npmjs.org) with `npm install bespoke`, or manually download either the [production version][min] or the [development version][max]. The Bespoke.js core is extremely lightweight, so you'll probably want to include some [plugins](#plugins).\n\n[min]: https://raw.github.com/markdalgleish/bespoke.js/master/dist/bespoke.min.js\n[max]: https://raw.github.com/markdalgleish/bespoke.js/master/dist/bespoke.js\n\n## Basic Usage\n\n### Markup\n\nIt's completely up to you which tags you use, but the following is a good starting point:\n\n```html\n<link rel=\"stylesheet\" href=\"path/to/my/theme.css\">\n\n<article id=\"presentation\">\n  <section>Slide 1</section>\n  <section>Slide 2</section>\n  <section>Slide 3</section>\n</article>\n\n<script src=\"bespoke.min.js\"></script>\n<script src=\"bespoke-keys.min.js\"></script>\n<script src=\"bespoke-touch.min.js\"></script>\n<script src=\"path/to/my/script.js\"></script>\n```\n\n### JavaScript\n\nDecks are created by selecting the parent element with the `from(selector[, plugins])` method. Once a parent element is selected, the child elements become slides.\n\n```js\nvar deck = bespoke.from('#presentation', {\n  // Plugins:\n  keys: true,\n  touch: true\n});\n```\n\n#### Control API\n\nProgrammatically control the state of the presentation.\n\n```js\nvar deck = bespoke.from('#presentation');\n\n// Next slide\ndeck.next();\n\n// Previous slide\ndeck.prev();\n\n// Go to a specific slide\ndeck.slide(0);\n\n// Get the active slide index\ndeck.slide(); // 0\n```\n\n### CSS\n\nTo create your own custom deck styles, Bespoke.js provides the necessary classes to your elements.\n\n<table>\n   <tr>\n    <td><b>bespoke-parent</b></td>\n    <td>The deck's containing element</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-slide</b></td>\n    <td>Every slide element</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-active</b></td>\n    <td>The active slide</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-inactive</b></td>\n    <td>All inactive slides</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-before</b></td>\n    <td>All slides before the active slide</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-before-<em>n</em></b></td>\n    <td>All slides before the active slide, with <em>n</em> value incrementing</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-after</b></td>\n    <td>All slides after the active slide</td>\n   </tr>\n   <tr>\n    <td><b>bespoke-after-<em>n</em></b></td>\n    <td>All slides after the active slide, with <em>n</em> value incrementing</td>\n   </tr>\n</table>\n\n## Plugins\n\n### Using Plugins\n\nPlugins are specified when instantiating your presentation, like so:\n\n```js\nvar deck = bespoke.from('#presentation', {\n  // Plugins:\n  keys: true,\n  touch: true\n});\n```\n\n### Official Plugins\n\nAll official plugins can be installed from Bower or npm, e.g. `$ bower install bespoke-keys` or `$ npm install bespoke-touch`\n\n - [bespoke-keys](https://github.com/markdalgleish/bespoke-keys) for keyboard interaction.\n - [bespoke-touch](https://github.com/markdalgleish/bespoke-touch) for touch interaction.\n - [bespoke-bullets](https://github.com/markdalgleish/bespoke-bullets) for animated bullet lists.\n - [bespoke-scale](https://github.com/markdalgleish/bespoke-scale) for responsive slide scaling.\n - [bespoke-hash](https://github.com/markdalgleish/bespoke-hash) for hash routing.\n - [bespoke-state](https://github.com/markdalgleish/bespoke-state) for slide-specific deck styles.\n - [bespoke-progress](https://github.com/markdalgleish/bespoke-progress) for progress bars.\n - [bespoke-forms](https://github.com/markdalgleish/bespoke-forms) for form element support.\n - [bespoke-loop](https://github.com/markdalgleish/bespoke-loop) for looped presentations.\n - [bespoke-vcr](https://github.com/markdalgleish/bespoke-vcr) for recording and playback.\n\n### Third-Party Plugins\n\n - [bespoke-fx](https://github.com/ebow/bespoke-fx) by [@tdhc](http://twitter.com/tdhc), for configurable slide transitions.\n - [bespoke-dir](https://github.com/ryanseddon/bespoke-dir) by [@ryanseddon](http://twitter.com/ryanseddon), for direction-based deck classes.\n - [bespoke-spotlight](https://github.com/mobz/bespoke-spotlight) by [@mobz](http://twitter.com/mobz), for quick-searching slide content.\n - [bespoke-blackout](https://github.com/originell/bespoke-blackout) by [@originell](http://twitter.com/originell), for temporarily blacking out the screen.\n - [bespoke-secondary](https://github.com/joelpurra/bespoke-secondary) by [@joelpurra](https://github.com/joelpurra), for slide notes in a secondary window.\n - [bespoke-advanced](https://github.com/joelpurra/bespoke-advanced) by [@joelpurra](https://github.com/joelpurra), to automatically advance slides on a timer.\n - [bespoke-jumpy](https://github.com/joelpurra/bespoke-jumpy) by [@joelpurra](https://github.com/joelpurra), for keyboard shortcuts to jump straight to specific slides.\n\nIf you'd like your plugin added to this list, [let me know](http://twitter.com/markdalgleish).\n\n## Advanced Usage\n\n### From HTMLElement\n\nIf you already have a reference to a DOM node, you can pass it directly to the `from` method.\n\n```js\nbespoke.from(element);\n```\n\n### Deck Instances\n\n##### Creating Deck Instances\n\nIndividual deck instances can be created and controlled separately.\n\n```js\n// First deck instance\nvar one = bespoke.from('#deck-one');\none.next();\none.prev();\none.slide(0);\n\n// Second deck instance\nvar two = bespoke.from('#deck-two');\ntwo.next();\ntwo.prev();\ntwo.slide(0);\n```\n\n##### Deck Instance Properties\n\nThe following properties are available on each instance.\n\n*Note: The optional [`eventData`](#custom-event-data) parameter is an object that will be merged with the `event` object in subsequent [event handlers](#events).*\n\n<table>\n  <tr>\n    <td><strong>next(<em>[eventData]</em>)</strong></td>\n    <td>Next slide.</td>\n  </tr>\n  <tr>\n    <td><strong>prev(<em>[eventData]</em>)</strong></td>\n    <td>Previous slide.</td>\n  </tr>\n  <tr>\n    <td><strong>slide([<em>index[, eventData]]</em>)</strong></td>\n    <td>Get or set the active slide index.</td>\n  </tr>\n  <tr>\n    <td><strong>on(<em>event, callback</em>)</strong></td>\n    <td>Attach <a href=\"#events\">event handlers</a></td>\n  </tr>\n  <tr>\n    <td><strong>fire(<em>event[, eventData]</em>)</strong></td>\n    <td>Fire custom events. <em>This method is primarily designed for plugin authors.</em></td>\n  </tr>\n  <tr>\n    <td><strong>parent</strong></td>\n    <td>The deck's parent element</td>\n  </tr>\n  <tr>\n    <td><strong>slides</strong></td>\n    <td>An array of slide elements</td>\n  </tr>\n</table>\n\n### Events\n\n##### Binding Events\n\nEvents are bound via the [deck instance](deck-instances). Each event is passed an event object containing a reference to the relevant slide and its index.\n\n```js\ndeck.on(eventName, function(event) {\n  event.slide; // Relevant slide\n  event.index; // Index of relevant slide\n\n  // Prevent default functionality (for deck interaction events only)\n  return false;\n});\n```\n\n##### Standard Events\n\nIn most cases, you will only need to use these standard events.\n\n<table>\n  <tr>\n    <td><strong>activate</strong></td>\n    <td>A slide has been activated. <strong>event.slide</strong> is the <em>activated</em> slide.</td>\n  </tr>\n  <tr>\n    <td><strong>deactivate</strong></td>\n    <td>A slide has been deactivated. <strong>event.slide</strong> is the <em>deactivated</em> slide.</td>\n  </tr>\n</table>\n\n##### Deck Interaction Events\n\nThese events are fired when the deck has been interacted with, but *before* the interaction has had any effect.\n\nThis allows you to intercept the default behaviour by returning `false` from the event handler.\n\n<table>\n  <tr>\n    <td><strong>next</strong></td>\n    <td>The next slide has been requested, even if last slide is active. <strong>event.slide</strong> is the <em>current</em> slide.</td>\n  </tr>\n  <tr>\n    <td><strong>prev</strong></td>\n    <td>The previous slide has been requested, even if first slide is active. <strong>event.slide</strong> is the <em>current</em> slide.</td>\n  </tr>\n  <tr>\n    <td><strong>slide</strong></td>\n    <td>A specific slide has been requested. <strong>event.slide</strong> is the <em>requested</em> slide.</td>\n  </tr>\n</table>\n\n##### Unbinding events\n\nWhen binding events, the `on` method returns a function that can be used to remove the event handler.\n\n```js\nvar off = deck.on('activate', function() {\n  // ...\n});\n\n// Unbind event\noff();\n```\n\n## Creating Plugins\n\nWant a boilerplate plugin? Use the official [Bespoke.js Plugin Generator](https://github.com/markdalgleish/generator-bespokeplugin).\n\nIf you'd like to learn by example, check out the [list of existing plugins](#plugins).\n\n### Basic Plugins\n\nPlugins are simply functions that are called when presentations are created.\n\nThey are passed a [deck instance](#deck-instance-properties) which allows you to interact with the deck's state, bind events and modify its elements.\n\n```js\n// Creating the plugin\nbespoke.plugins.myPlugin = function(deck) {\n  deck.on('activate', function(e) {\n    console.log('Activated slide ' + (e.index + 1) + ' of ' + deck.slides.length);\n  });\n};\n```\n\nThe plugin can now be provided to the second parameter of the `from(selector[, plugins])` method.\n\n```js\n// Using the plugin\nbespoke.from('#presentation', { myPlugin: true });\n```\n\n*Note: Your plugin won't run if the option value provided is `false`.*\n\n### Plugins with Options\n\nIf your plugin needs some configurability, options can be passed through as the second parameter.\n\n```js\n// Creating the plugin with options\nbespoke.plugins.myPlugin = function(deck, options) {\n  var showTotal = options && options.showTotal;\n\n  deck.on('activate', function(e) {\n    console.log('Activated slide ' + (e.index + 1) +\n      (showTotal ? ' of ' + deck.slides.length : ''));\n  });\n};\n\n// Using the plugin with options\nbespoke.from('#presentation', {\n  myPlugin: {\n    showTotal: true\n  }\n});\n```\n\n### Custom Event Data\n\nAdditional event data can be supplied to `next`, `prev` and `slide`, which is merged with the final `event` object in subsequent event handlers.\n\nThis functionality is particularly useful if you need to differentiate between events caused by your plugin, and those caused by your end users or other plugins.\n\n```js\nbespoke.plugins.myPlugin = function(deck) {\n\n  // Differentiating our plugin's events\n  deck.on('activate', function(event) {\n    if (event.foo === 'bar') {\n      // Triggered by my plugin...\n    } else {\n      // Triggered by end user, or another plugin...\n    }\n  });\n\n  // Providing custom event data\n  deck.next({\n    foo: 'bar'\n  });\n\n};\n```\n\n## Presentations\n\n - [DIY Presentations With Bespoke.js](http://markdalgleish.com/presentations/bespoke.js/) by [Mark Dalgleish](http://twitter.com/markdalgleish)\n - [Bespoke.js: The Road to 1KB](http://markdalgleish.github.io/presentation-bespoke.js-the-road-to-1kb/) by [Mark Dalgleish](http://twitter.com/markdalgleish)\n - [Javascript's Slightly Stricter Mode](http://geelen.github.io/web-directions-talk/) by [Glen Maddern](http://twitter.com/glenmaddern)\n - [The Trials of Transition Height: Auto](http://superhighfives.github.io/tweetflight-presentation/) by [Charlie Gleason](http://twitter.com/superhighfives)\n - [Welcome Our New ES5 Overlords](http://mikemaccana.github.io/rejectjs2013) by [Mike MacCana](https://twitter.com/mikemaccana)\n - [Rapid Web App Dev With Yeoman](http://mjt01.github.io/slides-yeoman/) by [Michael Taranto](http://twitter.com/michaeltaranto)\n - [Projects vs Products](http://joho.github.io/wdyk/) by [John Barton](http://twitter.com/johnbarton)\n - [Learn You The Node.js For Much Win](http://r.va.gg/presentations/campjs-learn-you-node/) by [Rod Vagg](http://twitter.com/rvagg)\n - [A Real Database Rethink](http://r.va.gg/presentations/nodeconfeu.2013) by [Rod Vagg](http://twitter.com/rvagg)\n - [Feature Flags with Directives](http://mjt01.github.io/slides-feature-flags/) by [Michael Taranto](http://twitter.com/michaeltaranto)\n - [Introduction to hapi](http://wolfe.id.au/presentations/hapi/) by [Mark Wolfe](http://twitter.com/wolfeidau)\n\nMade a presentation with Bespoke.js? [Let me know](http://twitter.com/markdalgleish).\n\n## Questions?\n\nContact me on GitHub or Twitter: [@markdalgleish](http://twitter.com/markdalgleish)\n\n## License\n\n[MIT License](http://markdalgleish.mit-license.org)\n",
  "readmeFilename": "README.md",
  "_id": "bespoke.js@0.4.0",
  "description": "[![Build Status](https://secure.travis-ci.org/markdalgleish/bespoke.js.png)](http://travis-ci.org/markdalgleish/bespoke.js)",
  "repository": {
    "type": "git",
    "url": "git://github.com/markdalgleish/bespoke.js.git"
  }
}